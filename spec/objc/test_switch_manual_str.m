// Autogenerated from KST: please remove this line if doing any edits by hand!

#import <XCTest/XCTest.h>
#import "switch_manual_str.h"

@interface switch_manual_str : XCTestCase
@property (strong) switch_manual_str_t *r;
@end

@implementation switch_manual_str

- (void)setUp {
    [super setUp];
    NSURL *dataURL = [NSURL fileURLWithPath:@"src/switch_opcodes.bin"];
    kstream *ks = [kstream streamWithURL:dataURL];
    self.r = [switch_manual_str_t initialize:ks];
}

- (void)tearDown {
    [super tearDown];
    self.r = nil;
}

- (void)test_switch_manual_str {
    /* simpleAssert: TestAssert(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),identifier(size)),IntNum(4))*/
    XCTAssertEqual(((switch_manual_str_t *)_r).opcodes.count, 4);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(0)),identifier(code)),Str(S))*/
    XCTAssertEqualObjects(((opcode_switch_manual_str_t *)((switch_manual_str_t *)_r).opcodes[0]).code, (@"S"));
    /* simpleAssert: TestAssert(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(0)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_str, opcode, strval),false)),identifier(value)),Str(foobar))*/
    XCTAssertEqualObjects(((strval_opcode_switch_manual_str_t *)((opcode_switch_manual_str_t *)((switch_manual_str_t *)_r).opcodes[0]).body).value, (@"foobar"));
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(1)),identifier(code)),Str(I))*/
    XCTAssertEqualObjects(((opcode_switch_manual_str_t *)((switch_manual_str_t *)_r).opcodes[1]).code, (@"I"));
    /* simpleAssert: TestAssert(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(1)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_str, opcode, intval),false)),identifier(value)),IntNum(66))*/
    XCTAssertEqual(((intval_opcode_switch_manual_str_t *)((opcode_switch_manual_str_t *)((switch_manual_str_t *)_r).opcodes[1]).body).value.unsignedCharValue, 66);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(2)),identifier(code)),Str(I))*/
    XCTAssertEqualObjects(((opcode_switch_manual_str_t *)((switch_manual_str_t *)_r).opcodes[2]).code, (@"I"));
    /* simpleAssert: TestAssert(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(2)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_str, opcode, intval),false)),identifier(value)),IntNum(55))*/
    XCTAssertEqual(((intval_opcode_switch_manual_str_t *)((opcode_switch_manual_str_t *)((switch_manual_str_t *)_r).opcodes[2]).body).value.unsignedCharValue, 55);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(3)),identifier(code)),Str(S))*/
    XCTAssertEqualObjects(((opcode_switch_manual_str_t *)((switch_manual_str_t *)_r).opcodes[3]).code, (@"S"));
    /* simpleAssert: TestAssert(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(3)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_str, opcode, strval),false)),identifier(value)),Str())*/
    XCTAssertEqualObjects(((strval_opcode_switch_manual_str_t *)((opcode_switch_manual_str_t *)((switch_manual_str_t *)_r).opcodes[3]).body).value, (@""));
}
@end
