// Autogenerated from KST: please remove this line if doing any edits by hand!

#import <XCTest/XCTest.h>
#import "instance_user_array.h"

@interface instance_user_array : XCTestCase
@property (strong) instance_user_array_t *r;
@end

@implementation instance_user_array

- (void)setUp {
    [super setUp];
    NSURL *dataURL = [NSURL fileURLWithPath:@"src/instance_std_array.bin"];
    kstream *ks = [kstream streamWithURL:dataURL];
    self.r = [instance_user_array_t initialize:ks];
}

- (void)tearDown {
    [super tearDown];
    self.r = nil;
}

- (void)test_instance_user_array {
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(ofs)),IntNum(16))*/
    XCTAssertEqual(((instance_user_array_t *)_r).ofs.unsignedIntValue, 16);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(qty_entries)),IntNum(3))*/
    XCTAssertEqual(((instance_user_array_t *)_r).qty_entries.unsignedIntValue, 3);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(entry_size)),IntNum(4))*/
    XCTAssertEqual(((instance_user_array_t *)_r).entry_size.unsignedIntValue, 4);
    /* simpleAssert: TestAssert(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),identifier(size)),IntNum(3))*/
    XCTAssertEqual(((instance_user_array_t *)_r).user_entries.count, 3);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(0)),identifier(word1)),IntNum(4369))*/
    XCTAssertEqual(((entry_instance_user_array_t *)((instance_user_array_t *)_r).user_entries[0]).word1.unsignedShortValue, 4369);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(0)),identifier(word2)),IntNum(4369))*/
    XCTAssertEqual(((entry_instance_user_array_t *)((instance_user_array_t *)_r).user_entries[0]).word2.unsignedShortValue, 4369);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(1)),identifier(word1)),IntNum(8738))*/
    XCTAssertEqual(((entry_instance_user_array_t *)((instance_user_array_t *)_r).user_entries[1]).word1.unsignedShortValue, 8738);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(1)),identifier(word2)),IntNum(8738))*/
    XCTAssertEqual(((entry_instance_user_array_t *)((instance_user_array_t *)_r).user_entries[1]).word2.unsignedShortValue, 8738);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(2)),identifier(word1)),IntNum(13107))*/
    XCTAssertEqual(((entry_instance_user_array_t *)((instance_user_array_t *)_r).user_entries[2]).word1.unsignedShortValue, 13107);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(2)),identifier(word2)),IntNum(13107))*/
    XCTAssertEqual(((entry_instance_user_array_t *)((instance_user_array_t *)_r).user_entries[2]).word2.unsignedShortValue, 13107);
}
@end
