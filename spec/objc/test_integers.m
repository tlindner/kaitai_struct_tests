// Autogenerated from KST: please remove this line if doing any edits by hand!

#import <XCTest/XCTest.h>
#import "integers.h"

@interface integers : XCTestCase
@property (strong) integers_t *r;
@end

@implementation integers

- (void)setUp {
    [super setUp];
    NSURL *dataURL = [NSURL fileURLWithPath:@"src/fixed_struct.bin"];
    kstream *ks = [kstream streamWithURL:dataURL];
    self.r = [integers_t initialize:ks];
}

- (void)tearDown {
    [super tearDown];
    self.r = nil;
}

- (void)test_integers {
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(uint8)),IntNum(255))*/
    XCTAssertEqual(((integers_t *)_r).uint8.unsignedCharValue, 255);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(uint16)),IntNum(65535))*/
    XCTAssertEqual(((integers_t *)_r).uint16.unsignedShortValue, 65535);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(uint32)),IntNum(4294967295))*/
    XCTAssertEqual(((integers_t *)_r).uint32.unsignedIntValue, 4294967295UL);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(uint64)),IntNum(18446744073709551615))*/
    XCTAssertEqual(((integers_t *)_r).uint64.unsignedLongLongValue, 18446744073709551615ULL);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(sint8)),UnaryOp(Minus,IntNum(1)))*/
    XCTAssertEqual(((integers_t *)_r).sint8.charValue, -1);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(sint16)),UnaryOp(Minus,IntNum(1)))*/
    XCTAssertEqual(((integers_t *)_r).sint16.shortValue, -1);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(sint32)),UnaryOp(Minus,IntNum(1)))*/
    XCTAssertEqual(((integers_t *)_r).sint32.intValue, -1);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(sint64)),UnaryOp(Minus,IntNum(1)))*/
    XCTAssertEqual(((integers_t *)_r).sint64.longLongValue, -1);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(uint16le)),IntNum(66))*/
    XCTAssertEqual(((integers_t *)_r).uint16le.unsignedShortValue, 66);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(uint32le)),IntNum(66))*/
    XCTAssertEqual(((integers_t *)_r).uint32le.unsignedIntValue, 66);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(uint64le)),IntNum(66))*/
    XCTAssertEqual(((integers_t *)_r).uint64le.unsignedLongLongValue, 66);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(sint16le)),UnaryOp(Minus,IntNum(66)))*/
    XCTAssertEqual(((integers_t *)_r).sint16le.shortValue, -66);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(sint32le)),UnaryOp(Minus,IntNum(66)))*/
    XCTAssertEqual(((integers_t *)_r).sint32le.intValue, -66);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(sint64le)),UnaryOp(Minus,IntNum(66)))*/
    XCTAssertEqual(((integers_t *)_r).sint64le.longLongValue, -66);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(uint16be)),IntNum(66))*/
    XCTAssertEqual(((integers_t *)_r).uint16be.unsignedShortValue, 66);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(uint32be)),IntNum(66))*/
    XCTAssertEqual(((integers_t *)_r).uint32be.unsignedIntValue, 66);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(uint64be)),IntNum(66))*/
    XCTAssertEqual(((integers_t *)_r).uint64be.unsignedLongLongValue, 66);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(sint16be)),UnaryOp(Minus,IntNum(66)))*/
    XCTAssertEqual(((integers_t *)_r).sint16be.shortValue, -66);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(sint32be)),UnaryOp(Minus,IntNum(66)))*/
    XCTAssertEqual(((integers_t *)_r).sint32be.intValue, -66);
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(sint64be)),UnaryOp(Minus,IntNum(66)))*/
    XCTAssertEqual(((integers_t *)_r).sint64be.longLongValue, -66);
}
@end
