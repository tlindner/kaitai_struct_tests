// Autogenerated from KST: please remove this line if doing any edits by hand!

#import <XCTest/XCTest.h>
#import "enum_of_value_inst.h"

@interface enum_of_value_inst : XCTestCase
@property (strong) enum_of_value_inst_t *r;
@end

@implementation enum_of_value_inst

- (void)setUp {
    [super setUp];
    NSURL *dataURL = [NSURL fileURLWithPath:@"src/enum_0.bin"];
    kstream *ks = [kstream streamWithURL:dataURL];
    self.r = [enum_of_value_inst_t initialize:ks];
}

- (void)tearDown {
    [super tearDown];
    self.r = nil;
}

- (void)test_enum_of_value_inst {
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(pet_1)),EnumByLabel(identifier(animal),identifier(cat),typeId(false,ArrayBuffer(enum_of_value_inst),false)))*/
    XCTAssertEqualObjects(((enum_of_value_inst_t *)_r).pet_1, ([@"cat" KSENUMWithDictionary:enum_of_value_inst_t._animal]));
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(pet_2)),EnumByLabel(identifier(animal),identifier(chicken),typeId(false,ArrayBuffer(enum_of_value_inst),false)))*/
    XCTAssertEqualObjects(((enum_of_value_inst_t *)_r).pet_2, ([@"chicken" KSENUMWithDictionary:enum_of_value_inst_t._animal]));
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(pet_3)),EnumByLabel(identifier(animal),identifier(dog),typeId(false,ArrayBuffer(enum_of_value_inst),false)))*/
    XCTAssertEqualObjects(((enum_of_value_inst_t *)_r).pet_3, ([@"dog" KSENUMWithDictionary:enum_of_value_inst_t._animal]));
    /* simpleAssert: TestAssert(Attribute(Name(identifier(q1w2e3)),identifier(pet_4)),EnumByLabel(identifier(animal),identifier(dog),typeId(false,ArrayBuffer(enum_of_value_inst),false)))*/
    XCTAssertEqualObjects(((enum_of_value_inst_t *)_r).pet_4, ([@"dog" KSENUMWithDictionary:enum_of_value_inst_t._animal]));
}
@end
