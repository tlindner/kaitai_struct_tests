// Autogenerated from KST: please remove this line if doing any edits by hand!

#import <XCTest/XCTest.h>
#import "switch_manual_int_else.h"

@interface switch_manual_int_else : XCTestCase
@property (strong) switch_manual_int_else_t *r;
@end

@implementation switch_manual_int_else

- (void)setUp {
    [super setUp];
    NSURL *dataURL = [NSURL fileURLWithPath:@"src/switch_opcodes2.bin"];
    kstream *ks = [kstream streamWithURL:dataURL];
    self.r = [switch_manual_int_else_t initialize:ks];
}

- (void)tearDown {
    [super tearDown];
    self.r = nil;
}

- (void)test_switch_manual_int_else {
    /* simpleAssert: TestAssert(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),identifier(size)),IntNum(4))*/
    XCTAssertEqual(((switch_manual_int_else_t *)_r).opcodes.count, 4);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(0)),identifier(code)),IntNum(83))*/
    XCTAssertEqual(((opcode_switch_manual_int_else_t *)((switch_manual_int_else_t *)_r).opcodes[0]).code.unsignedCharValue, 83);
    /* simpleAssert: TestAssert(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(0)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_int_else, opcode, strval),false)),identifier(value)),Str(foo))*/
    XCTAssertEqualObjects(((strval_opcode_switch_manual_int_else_t *)((opcode_switch_manual_int_else_t *)((switch_manual_int_else_t *)_r).opcodes[0]).body).value, (@"foo"));
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(1)),identifier(code)),IntNum(88))*/
    XCTAssertEqual(((opcode_switch_manual_int_else_t *)((switch_manual_int_else_t *)_r).opcodes[1]).code.unsignedCharValue, 88);
    /* simpleAssert: TestAssert(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(1)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_int_else, opcode, noneval),false)),identifier(filler)),IntNum(66))*/
    XCTAssertEqual(((noneval_opcode_switch_manual_int_else_t *)((opcode_switch_manual_int_else_t *)((switch_manual_int_else_t *)_r).opcodes[1]).body).filler.unsignedIntValue, 66);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(2)),identifier(code)),IntNum(89))*/
    XCTAssertEqual(((opcode_switch_manual_int_else_t *)((switch_manual_int_else_t *)_r).opcodes[2]).code.unsignedCharValue, 89);
    /* simpleAssert: TestAssert(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(2)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_int_else, opcode, noneval),false)),identifier(filler)),IntNum(51966))*/
    XCTAssertEqual(((noneval_opcode_switch_manual_int_else_t *)((opcode_switch_manual_int_else_t *)((switch_manual_int_else_t *)_r).opcodes[2]).body).filler.unsignedIntValue, 51966);
    /* simpleAssert: TestAssert(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(3)),identifier(code)),IntNum(73))*/
    XCTAssertEqual(((opcode_switch_manual_int_else_t *)((switch_manual_int_else_t *)_r).opcodes[3]).code.unsignedCharValue, 73);
    /* simpleAssert: TestAssert(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(opcodes)),IntNum(3)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_int_else, opcode, intval),false)),identifier(value)),IntNum(7))*/
    XCTAssertEqual(((intval_opcode_switch_manual_int_else_t *)((opcode_switch_manual_int_else_t *)((switch_manual_int_else_t *)_r).opcodes[3]).body).value.unsignedCharValue, 7);
}
@end
